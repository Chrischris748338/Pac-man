Look what I just made 
// Game variables
var canvas;
var ctx;
var bird;
var pipes = [];
var score = 0;

// Bird object
function Bird() {
  this.x = 50;
  this.y = canvas.height / 2;
  this.velocityY = 0;
  this.gravity = 0.5;

  this.jump = function() {
    this.velocityY = -10;
  };

  this.update = function() {
    this.velocityY += this.gravity;
    this.y += this.velocityY;
  };
}

// Pipe object
function Pipe() {
  this.x = canvas.width;
  this.y = Math.floor(Math.random() * (canvas.height - 200)) + 100;
  this.width = 80;
  this.height = 300;
  this.speed = 2;

  this.update = function() {
    this.x -= this.speed;
  };

  this.draw = function() {
    ctx.fillStyle = "#00FF00";
    ctx.fillRect(this.x, 0, this.width, this.y);
    ctx.fillRect(this.x, this.y + this.height, this.width, canvas.height - (this.y + this.height));
  };
}

// Game initialization
function init() {
  canvas = document.getElementById("canvas");
  ctx = canvas.getContext("2d");

  bird = new Bird();

  pipes.push(new Pipe());

  canvas.addEventListener("click", function() {
    bird.jump();
  });

  setInterval(update, 20);
}

// Game update
function update() {
  // Clear the canvas
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  // Update and draw the bird
  bird.update();
  ctx.fillStyle = "#0000FF";
  ctx.fillRect(bird.x, bird.y, 40, 40);

  // Update and draw the pipes
  for (var i = 0; i < pipes.length; i++) {
    pipes[i].update();
    pipes[i].draw();

    // Collision detection
    if (
      bird.x + 40 >= pipes[i].x && bird.x <= pipes[i].x + pipes[i].width &&
      (bird.y <= pipes[i].y || bird.y + 40 >= pipes[i].y + pipes[i].height)
    ) {
gameOver();
    }

    // Score increment
    if (pipes[i].x + pipes[i].width == bird.x) {
      score++;
    }

    // Remove off-screen pipes
    if (pipes[i].x + pipes[i].width < 0) {
      pipes.splice(i, 1);
    }
  }

  // Draw the score
  ctx.fillStyle = "#000000";
  ctx.font = "20px Arial";
  ctx.fillText("Score: " + score, 10, 30);

  // Generate new pipes
  if (frameCount % 120 === 0) {
    pipes.push(new Pipe());
  }
}

// Game over
function gameOver() {
  // Perform game over actions here
  alert("Game Over! Score: " + score);
  location.reload(); // Restart the game
}

// Initialize the game
init();




-- // Custom Settings
getgenv().TreasureAutoFarm = {
    Enabled = true, -- // Toggle the auto farm on and off
    Teleport = 2, -- // How fast between each teleport between the stages and stuff
    TimeBetweenRuns = 5 -- // How long to wait until it goes to the next run
}

-- // Services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local Lighting = game:GetService("Lighting")

-- // Vars
local LocalPlayer = Players.LocalPlayer

-- // Goes through all of the stages
local autoFarm = function(currentRun)
    -- // Variables
    local Character = LocalPlayer.Character
    local NormalStages = Workspace.BoatStages.NormalStages

    -- // Go to each stage thing
    for i = 1, 10 do
        local Stage = NormalStages["CaveStage" .. i]
        local DarknessPart = Stage:FindFirstChild("DarknessPart")

        if (DarknessPart) then
            -- // Teleport to next stage
            print("Teleporting to next stage: Stage " .. i)
            Character.HumanoidRootPart.CFrame = DarknessPart.CFrame

            -- // Create a temp part under you
            local Part = Instance.new("Part", LocalPlayer.Character)
            Part.Anchored = true
            Part.Position =
LocalPlayer.Character.HumanoidRootPart.Position - Vector3.new(0, 6, 0)

            -- // Wait and remove temp part
            wait(getgenv().TreasureAutoFarm.Teleport)
            Part:Destroy()
        end
    end

    -- // Go to end
    print("Teleporting to the end")
    repeat wait()
        Character.HumanoidRootPart.CFrame = NormalStages.TheEnd.GoldenChest.Trigger.CFrame
    until Lighting.ClockTime ~= 14

    -- // Wait until you have respawned
    local Respawned = false
    local Connection
    Connection = LocalPlayer.CharacterAdded:Connect(function()
        Respawned = true
        Connection:Disconnect()
    end)

    repeat wait() until Respawned
    wait(getgenv().TreasureAutoFarm.TimeBetweenRuns)
    print("Auto Farm: Run " .. currentRun .. " finished")
end

-- // Whilst the autofarm is enable, constantly do it
local autoFarmRun = 1
while wait() do
    if (getgenv().TreasureAutoFarm.Enabled) then
        print("Initialising Auto Farm: Run " .. autoFarmRun)
        autoFarm(autoFarmRun)
        autoFarmRun = autoFarmRun + 1
    end
end
